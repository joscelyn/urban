// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: urban.proto

package urban

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrbanClient is the client API for Urban service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrbanClient interface {
	GetTopStories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTopStoriesResponse, error)
	Whois(ctx context.Context, in *WhoisRequest, opts ...grpc.CallOption) (*WhoisResponse, error)
}

type urbanClient struct {
	cc grpc.ClientConnInterface
}

func NewUrbanClient(cc grpc.ClientConnInterface) UrbanClient {
	return &urbanClient{cc}
}

func (c *urbanClient) GetTopStories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTopStoriesResponse, error) {
	out := new(GetTopStoriesResponse)
	err := c.cc.Invoke(ctx, "/urban.Urban/GetTopStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urbanClient) Whois(ctx context.Context, in *WhoisRequest, opts ...grpc.CallOption) (*WhoisResponse, error) {
	out := new(WhoisResponse)
	err := c.cc.Invoke(ctx, "/urban.Urban/Whois", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrbanServer is the server API for Urban service.
// All implementations must embed UnimplementedUrbanServer
// for forward compatibility
type UrbanServer interface {
	GetTopStories(context.Context, *emptypb.Empty) (*GetTopStoriesResponse, error)
	Whois(context.Context, *WhoisRequest) (*WhoisResponse, error)
	mustEmbedUnimplementedUrbanServer()
}

// UnimplementedUrbanServer must be embedded to have forward compatible implementations.
type UnimplementedUrbanServer struct {
}

func (UnimplementedUrbanServer) GetTopStories(context.Context, *emptypb.Empty) (*GetTopStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopStories not implemented")
}
func (UnimplementedUrbanServer) Whois(context.Context, *WhoisRequest) (*WhoisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whois not implemented")
}
func (UnimplementedUrbanServer) mustEmbedUnimplementedUrbanServer() {}

// UnsafeUrbanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrbanServer will
// result in compilation errors.
type UnsafeUrbanServer interface {
	mustEmbedUnimplementedUrbanServer()
}

func RegisterUrbanServer(s grpc.ServiceRegistrar, srv UrbanServer) {
	s.RegisterService(&Urban_ServiceDesc, srv)
}

func _Urban_GetTopStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrbanServer).GetTopStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urban.Urban/GetTopStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrbanServer).GetTopStories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urban_Whois_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrbanServer).Whois(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urban.Urban/Whois",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrbanServer).Whois(ctx, req.(*WhoisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Urban_ServiceDesc is the grpc.ServiceDesc for Urban service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Urban_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urban.Urban",
	HandlerType: (*UrbanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopStories",
			Handler:    _Urban_GetTopStories_Handler,
		},
		{
			MethodName: "Whois",
			Handler:    _Urban_Whois_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urban.proto",
}
